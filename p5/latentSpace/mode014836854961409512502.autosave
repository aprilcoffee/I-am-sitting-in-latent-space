ArrayList<Particle> particles;
void loadAllMode0Image() {
  print("loading Mode 0 images");

  for (int i=0; i<100; i++) {
    print(i);
    String imgstr = "fullMorph/img2img1/img_" + nf(i, 5) + ".jpg";
    allBeach[0][i] =  loadImage(imgstr);
  }
}

void mode0() {
  blendMode(BLEND);

  tint(255, 215);
  image(black, 0, 0, width, height);
  tint(255, 255);
  blendMode(BLEND);

  stroke(0, 0, 230);
  beginShape();
  for (int i = 0; i < 1024; i++) {
    //vertex(
    // map(i, 0, 1024, 0, width),
    //  map(waveform.data[i], -1, 1, 0, height)
    //  );
  }
  endShape();

  pixelSortRenderer.beginDraw();
  pixelSortRenderer.shader(pixelSortShader);
  pixelSortRenderer.clear();
  pixelSortShader.set("imageTex1", allBeach[0][mode0counter]);
  pixelSortShader.set("imageTex2", allBeach[0][mode0counter+1]);
  pixelSortShader.set("interpolationFactor", mode0lerp );

  pixelSortShader.set("changing", volume);
  pixelSortRenderer.rect(0, 0, width, height);
  pixelSortRenderer.endDraw();



  image(pixelSortRenderer, 0, 0, width, height);
  for(int s=0;s<particles.size();s++){
    Particle p = ((Particle)(particles.get(i)));
    p.update(pixelSortRenderer);
    p.show();
  }
  
  fx.render()
    //.sobel()
    //.bloom(0.1, 20, 30)
    //.blur(10, 0.5)
    //.toon()
    //.brightPass(0.1)
    //.blur(30, 10)
    .compose();

  mode0lerp+=volume*2;
  if (mode0lerp >= 1) {
    mode0counter++;
    mode0lerp = 0;
    //print("changed");
  }

  mode0counter%=100-1;
}

class Particle{
  PVector pos;
  PVector vel;
  color col;
  int num;
  Particle(PVector _pos, int _num){
    pos = _pos;
    num = _num;  
}
  void update(PGraphics _c){
   
    float tempX = abs(canvasWidth*cos(radians(s/3.2)));
    float tempY = abs(canvasHeight*sin(radians(s/1.2)));
    col = _c.get(floor(tempX),floor(tempY));
    pos = new PVector(tempX,tempY);
  }
  void show(){
    noStroke();
    fill(col);
  ellipse(pos.x,pos.y,10,10);
  }


}
